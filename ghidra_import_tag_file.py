#Import a tag-file generated by Tiny Tracer (https://github.com/hasherezade/tiny_tracer)
#This script should work on both Python 2 (Ghidra default) and Python 3 (using Ghidrathon)
#@author zxgio
#@category Import
#@keybinding
#@menupath
#@toolbar
from __future__ import print_function
from collections import defaultdict
import re

ARGUMENT_LINE = re.compile(r"^\tArg\[\d+\]\s*=.*$")
RVA_LINE = re.compile(r"^([0-9a-f]+);(.*)$", re.IGNORECASE)
SHELLCODE_LINE = re.compile(r"^>\s+([0-9a-f+]+);(.*)$", re.IGNORECASE)

def read_tag_file(filepath):
    rva_to_comments = defaultdict(set)
    with open(filepath, "r") as f:
        for line in f:
            if monitor.isCancelled():
                return
            line = line.rstrip()
            if len(line)==0 or ARGUMENT_LINE.match(line):
                continue
            if SHELLCODE_LINE.match(line):
                print(line)
                continue
            m = RVA_LINE.match(line)
            if m is None:
                print("Skipping line:", line)
            rva = int(m.group(1), 16)
            comment = m.group(2)
            rva_to_comments[rva].add(comment)
    base_address = currentProgram.getMinAddress()
    for rva in sorted(rva_to_comments.keys()):
        # print(hex(address.getOffset()), comments)
        if monitor.isCancelled():
            return
        address = base_address.add(rva)
        comments = ", ".join(rva_to_comments[rva])
        setPreComment(address, "tt: " + comments)
        createBookmark(address, "tiny_tracer", comments)

f = askFile("Please select a .tag file to import", "Import Tag-file")
if f:
    absolute_path = f.getAbsolutePath()
    if not absolute_path.lower().endswith(".tag"):
        print("Select a .tag file to continue.")
    else:
        print("Reading", absolute_path, "tag-file.")
        read_tag_file(absolute_path)
